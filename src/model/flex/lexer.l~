%{
#include "lexglobal.h"
#include <string.h>
#include <math.h>

int line = 1, col = 1;


%}

%%


[0-9]*\.[0-9]+    {                      col += (int) strlen(yytext); 
                                                yylval.dval = atof(yytext); 
                                                return DOUBLE; }
[0-9]+			{			yylval.num = atoi(yytext);
                       				return INTEGER; }
[ \t]   { col += (int) strlen(yytext); }               /* ignore but count white space */
[a-z][a-z0-9]*                           { 	yylval.id = strdup(yytext);
			         		return VARIABLE;
                                               }

"PR"		{ return PR; }
"AND"           {  return AND; }
"U"           {  return UNTIL; }
"NEG"           {  return NEG; }
"<="		{ return LEQ; }
"["		{ return LCOLON; }
"]"		{ return RCOLON; }
"("		{ return LPAREN; }
")"		{ return RPAREN; }


\n      { col = 0; ++line; return NEWLINE; }

.       { col += (int) strlen(yytext); return yytext[0]; }
%%
/**
 * reset the line and column count
 *
 *
 */
void reset_lexer(void)
{

  line = 1;
  col  = 1;

}

/**
 * yyerror() is invoked when the lexer or the parser encounter
 * an error. The error message is passed via *s
 *
 *
 */
void yyerror(char *s)
{
  printf("error: %s at line: %d col: %d\n",s,line,col);
}

int yywrap(void)
{
  return 1;
}
